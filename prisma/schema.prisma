// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  items         Item[]
  itemCatalogs  ItemCatalog[]
  requests      Request[]
  stockUpdates  StockHistory[]
  orders        Order[]    @relation("UserOrders")
  purchaseOrders    PurchaseOrder[]
  goodsReceipts     GoodsReceipt[]
}

model ItemCatalog {
  id                  String    @id @default(cuid())
  name                String
  description         String?
  dimensions          String?
  weight             Float?
  storageConditions  String?
  handlingInstructions String?
  minimumStockLevel  Int       @default(5)
  reorderPoint       Int       @default(0)
  category           Category? @relation(fields: [categoryId], references: [id])
  categoryId         String?
  status             ItemStatus @default(AVAILABLE)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  createdBy          User      @relation(fields: [userId], references: [id])
  userId             String
  suppliers          SupplierItem[]
}

model SupplierItem {
  id                String      @id @default(cuid())
  supplier          Supplier    @relation(fields: [supplierId], references: [id])
  supplierId        String
  itemCatalog       ItemCatalog @relation(fields: [itemCatalogId], references: [id])
  itemCatalogId     String
  unitPrice         Float
  leadTime          Int?        // in days
  minimumOrderQty   Int         @default(1)
  packSize          Int         @default(1)
  isPreferred       Boolean     @default(false)
  supplierSku       String?     // Supplier's own product code
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  @@unique([supplierId, itemCatalogId])
}

model Item {
  id                  String    @id @default(cuid())
  name                String
  description         String?
  dimensions          String?
  weight             Float?
  storageConditions  String?
  handlingInstructions String?
  stockLevel         Int       @default(0)
  categoryId         String?
  category           Category? @relation(fields: [categoryId], references: [id], name: "LegacyItems")
  warehouse          String?
  aisle              String?
  shelf              String?
  expiryDate         DateTime?
  status             ItemStatus @default(AVAILABLE)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  createdBy          User      @relation(fields: [userId], references: [id])
  userId             String
  qrCodes            QRCode[]
  requests           Request[]
  stockHistory       StockHistory[]
  orders             Order[]    @relation("OrderItems")
  supplier           Supplier   @relation("SupplierItems", fields: [supplierId], references: [id])
  supplierId         String
  purchaseOrderItems PurchaseOrderItem[]
  receiptItems      GoodsReceiptItem[]
  lastCountDate     DateTime?
}

model QRCode {
  id          String    @id @default(cuid())
  url         String    @unique
  isActive    Boolean   @default(true)
  item        Item      @relation(fields: [itemId], references: [id])
  itemId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Request {
  id          String        @id @default(cuid())
  type        RequestType
  status      RequestStatus @default(PENDING)
  item        Item         @relation(fields: [itemId], references: [id])
  itemId      String
  user        User         @relation(fields: [userId], references: [id])
  userId      String
  quantity    Int          @default(1)
  notes       String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  items       ItemCatalog[]
  legacyItems Item[]    @relation("LegacyItems")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model StockHistory {
  id          String    @id @default(cuid())
  item        Item      @relation(fields: [itemId], references: [id])
  itemId      String
  oldLevel    Int
  newLevel    Int
  reason      StockUpdateReason
  notes       String?
  updatedBy   User      @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime  @default(now())
}

model Order {
  id          String        @id @default(cuid())
  user        User          @relation("UserOrders", fields: [userId], references: [id])
  userId      String
  items       Item[]        @relation("OrderItems")
  status      OrderStatus   @default(PENDING)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Supplier {
  id                String          @id @default(cuid())
  name              String
  email             String?
  phone             String?
  address           String?
  notes             String?
  status            SupplierStatus  @default(ACTIVE)
  rating            Float?          @db.Real
  taxId             String?
  website           String?
  paymentTerms      String?
  currency          String?         @default("USD")
  diversityStatus   String?
  riskLevel         RiskLevel?
  onboardingDate    DateTime        @default(now())
  lastAuditDate     DateTime?
  nextAuditDate     DateTime?
  items             Item[]          @relation("SupplierItems")
  supplierItems     SupplierItem[]
  contacts          SupplierContact[]
  documents         SupplierDocument[]
  categories        SupplierCategory[]
  purchaseOrders    PurchaseOrder[]
  qualifications    SupplierQualification[]
  communications    SupplierCommunication[]
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

model SupplierContact {
  id          String    @id @default(cuid())
  supplierId  String
  name        String
  title       String?
  email       String
  phone       String?
  isPrimary   Boolean   @default(false)
  department  String?
  supplier    Supplier  @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([supplierId, email])
}

model SupplierDocument {
  id          String            @id @default(cuid())
  supplierId  String
  type        DocumentType
  name        String
  url         String
  expiryDate  DateTime?
  status      DocumentStatus    @default(ACTIVE)
  supplier    Supplier         @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model SupplierCategory {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  suppliers   Supplier[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model SupplierQualification {
  id              String    @id @default(cuid())
  supplierId      String
  type            String
  status          QualificationStatus @default(PENDING)
  validFrom       DateTime
  validUntil      DateTime?
  attachments     String[]
  notes           String?
  supplier        Supplier  @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model SupplierCommunication {
  id          String    @id @default(cuid())
  supplierId  String
  type        CommunicationType
  subject     String
  content     String
  attachments String[]
  sender      String
  recipient   String
  status      CommunicationStatus @default(SENT)
  supplier    Supplier  @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model PurchaseOrder {
  id          String    @id @default(cuid())
  supplier    Supplier  @relation(fields: [supplierId], references: [id])
  supplierId  String
  status      POStatus  @default(DRAFT)
  items       PurchaseOrderItem[]
  totalAmount Float
  notes       String?
  createdBy   User      @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  receipts    GoodsReceipt[]
}

model PurchaseOrderItem {
  id              String        @id @default(cuid())
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId String
  item            Item          @relation(fields: [itemId], references: [id])
  itemId          String
  quantity        Int
  unitPrice       Float
  totalPrice      Float
  receivedQty     Int           @default(0)
  notes           String?
}

model GoodsReceipt {
  id              String        @id @default(cuid())
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId String
  receivedBy      User          @relation(fields: [userId], references: [id])
  userId          String
  receivedDate    DateTime      @default(now())
  items           GoodsReceiptItem[]
  notes           String?
  status          ReceiptStatus @default(PENDING)
}

model GoodsReceiptItem {
  id              String        @id @default(cuid())
  receipt         GoodsReceipt  @relation(fields: [receiptId], references: [id])
  receiptId       String
  item            Item          @relation(fields: [itemId], references: [id])
  itemId          String
  quantity        Int
  batchNumber     String?
  expiryDate      DateTime?
  notes           String?
}

enum UserRole {
  ADMIN
  WORKER1
  WORKER2
  USER
}

enum ItemStatus {
  AVAILABLE
  LOW_STOCK
  OUT_OF_STOCK
  EXPIRED
  DAMAGED
}

enum RequestType {
  CHECKOUT
  RETURN
  RESTOCK
  MAINTENANCE
}

enum RequestStatus {
  PENDING
  APPROVED
  DENIED
  COMPLETED
  CANCELLED
}

enum StockUpdateReason {
  RESTOCK
  SALE
  RETURN
  DAMAGE
  ADJUSTMENT
  EXPIRED
}

enum OrderStatus {
  PENDING
  APPROVED
  COMPLETED
  CANCELLED
}

enum POStatus {
  DRAFT
  PENDING
  APPROVED
  RECEIVED
  CANCELLED
}

enum ReceiptStatus {
  PENDING
  COMPLETED
  REJECTED
}

enum SupplierStatus {
  ACTIVE
  INACTIVE
  PENDING
  SUSPENDED
  BLACKLISTED
}

enum RiskLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum DocumentType {
  CONTRACT
  CERTIFICATION
  INSURANCE
  LICENSE
  FINANCIAL
  COMPLIANCE
  OTHER
}

enum DocumentStatus {
  ACTIVE
  EXPIRED
  PENDING
  REJECTED
}

enum QualificationStatus {
  PENDING
  APPROVED
  REJECTED
  EXPIRED
}

enum CommunicationType {
  EMAIL
  MEETING
  PHONE
  AUDIT
  OTHER
}

enum CommunicationStatus {
  DRAFT
  SENT
  RECEIVED
  READ
  ARCHIVED
}
